import {
    AuthBlock,
    Content,
    AuthInput,
    ForgotPass,
    Enter,
    RegestrB,
    SendMe,
    SendAgainBlock,
    OneIdBtn
} from './auth-block.e'
import Link from "next/dist/client/link";
import { useState } from "react";
import { MyInput } from '../../components';
import { useForm } from 'react-hook-form';
import { api } from '../../services/api';
import Image from 'next/image';
import Router from "next/router";
import { AuthContext } from "../../context/AuthProvider";
import { useContext } from "react";
import { Formik, Field, Form } from "formik";

import axios from 'axios';
const AuthPage = () => {
    const Logo = () => {
        return (
            <center>
<svg width="351" height="127" viewBox="0 0 351 127" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M138.105 48.88V82H132.057V48.88H138.105ZM151.881 61.984V66.688H137.721V61.984H151.881ZM157.353 48.88V82H151.353V48.88H157.353ZM176.341 57.856C178.229 57.856 179.813 58.112 181.093 58.624C182.373 59.104 183.349 59.936 184.021 61.12C184.693 62.304 185.029 63.936 185.029 66.016V82H180.421L179.605 76.912L179.221 76.24V65.968C179.189 64.72 178.885 63.824 178.309 63.28C177.733 62.704 176.645 62.416 175.045 62.416C173.797 62.416 172.245 62.464 170.389 62.56C168.565 62.656 166.725 62.784 164.869 62.944L164.341 58.96C165.461 58.736 166.725 58.544 168.133 58.384C169.573 58.224 170.997 58.096 172.405 58C173.845 57.904 175.157 57.856 176.341 57.856ZM182.533 67.504L182.485 71.104H171.733C170.741 71.136 170.037 71.392 169.621 71.872C169.205 72.352 168.997 73.008 168.997 73.84V75.136C168.997 76.096 169.253 76.832 169.765 77.344C170.309 77.824 171.109 78.064 172.165 78.064C173.029 78.064 173.989 77.888 175.045 77.536C176.101 77.184 177.141 76.672 178.165 76C179.221 75.328 180.165 74.528 180.997 73.6V76.624C180.709 77.104 180.261 77.68 179.653 78.352C179.045 78.992 178.293 79.632 177.397 80.272C176.533 80.912 175.525 81.44 174.373 81.856C173.221 82.272 171.957 82.48 170.581 82.48C169.173 82.48 167.909 82.24 166.789 81.76C165.669 81.248 164.789 80.512 164.149 79.552C163.541 78.56 163.237 77.344 163.237 75.904V73.408C163.237 71.552 163.845 70.112 165.061 69.088C166.277 68.032 167.973 67.504 170.149 67.504H182.533ZM198.395 58C201.115 58 203.291 58.16 204.923 58.48C206.555 58.8 207.739 59.424 208.475 60.352C209.211 61.248 209.579 62.576 209.579 64.336C209.579 66.064 209.195 67.376 208.427 68.272C207.691 69.136 206.395 69.648 204.539 69.808V69.952C206.683 70.112 208.203 70.704 209.099 71.728C209.995 72.72 210.443 74.208 210.443 76.192C210.443 77.92 210.075 79.248 209.339 80.176C208.603 81.072 207.451 81.68 205.883 82C204.347 82.32 202.347 82.48 199.883 82.48C198.283 82.48 196.619 82.416 194.891 82.288C193.195 82.192 191.531 81.984 189.899 81.664L190.283 77.584C191.659 77.712 193.163 77.824 194.795 77.92C196.427 77.984 197.995 78.016 199.499 78.016C201.451 78.016 202.763 77.824 203.435 77.44C204.139 77.024 204.491 76.208 204.491 74.992C204.491 74.192 204.331 73.584 204.011 73.168C203.723 72.72 203.211 72.416 202.475 72.256C201.771 72.064 200.795 71.968 199.547 71.968L193.211 71.92V68.176L199.499 68.08C200.651 68.08 201.531 68 202.139 67.84C202.779 67.648 203.227 67.36 203.483 66.976C203.739 66.56 203.867 65.968 203.867 65.2C203.867 64.432 203.707 63.856 203.387 63.472C203.099 63.088 202.571 62.832 201.803 62.704C201.067 62.576 200.011 62.512 198.635 62.512C197.259 62.512 195.883 62.56 194.507 62.656C193.163 62.72 191.979 62.816 190.955 62.944L190.523 58.864C191.963 58.48 193.387 58.24 194.795 58.144C196.203 58.048 197.403 58 198.395 58ZM226.467 58.192C228.995 58.192 230.995 58.368 232.467 58.72C233.939 59.072 234.995 59.712 235.635 60.64C236.307 61.536 236.643 62.816 236.643 64.48C236.643 66.144 236.243 67.408 235.443 68.272C234.675 69.136 233.363 69.648 231.507 69.808V69.952C233.747 70.112 235.299 70.72 236.163 71.776C237.059 72.832 237.507 74.304 237.507 76.192C237.507 77.792 237.171 79.04 236.499 79.936C235.859 80.832 234.819 81.472 233.379 81.856C231.971 82.208 230.115 82.384 227.811 82.384C226.019 82.384 224.451 82.368 223.107 82.336C221.763 82.336 220.515 82.304 219.363 82.24C218.243 82.208 217.075 82.16 215.859 82.096L216.483 78.16C217.155 78.192 218.419 78.224 220.275 78.256C222.163 78.256 224.371 78.256 226.899 78.256C228.083 78.256 229.027 78.176 229.731 78.016C230.467 77.824 230.979 77.488 231.267 77.008C231.587 76.528 231.747 75.856 231.747 74.992C231.747 73.68 231.379 72.8 230.643 72.352C229.907 71.872 228.595 71.632 226.707 71.632H216.435V68.128H226.707C227.827 68.128 228.707 68.048 229.347 67.888C230.019 67.728 230.499 67.424 230.787 66.976C231.075 66.528 231.219 65.904 231.219 65.104C231.219 64.368 231.059 63.792 230.739 63.376C230.419 62.96 229.891 62.672 229.155 62.512C228.451 62.352 227.475 62.272 226.227 62.272C224.723 62.24 223.379 62.224 222.195 62.224C221.011 62.224 219.955 62.224 219.027 62.224C218.099 62.224 217.251 62.272 216.483 62.368L215.859 58.48C216.947 58.384 217.987 58.32 218.979 58.288C220.003 58.256 221.107 58.24 222.291 58.24C223.507 58.208 224.899 58.192 226.467 58.192ZM221.331 58.48V82.096H215.859V58.48H221.331ZM254.904 57.856C256.792 57.856 258.376 58.112 259.656 58.624C260.936 59.104 261.912 59.936 262.584 61.12C263.256 62.304 263.592 63.936 263.592 66.016V82H258.984L258.168 76.912L257.784 76.24V65.968C257.752 64.72 257.448 63.824 256.872 63.28C256.296 62.704 255.208 62.416 253.608 62.416C252.36 62.416 250.808 62.464 248.952 62.56C247.128 62.656 245.288 62.784 243.432 62.944L242.904 58.96C244.024 58.736 245.288 58.544 246.696 58.384C248.136 58.224 249.56 58.096 250.968 58C252.408 57.904 253.72 57.856 254.904 57.856ZM261.096 67.504L261.048 71.104H250.296C249.304 71.136 248.6 71.392 248.184 71.872C247.768 72.352 247.56 73.008 247.56 73.84V75.136C247.56 76.096 247.816 76.832 248.328 77.344C248.872 77.824 249.672 78.064 250.728 78.064C251.592 78.064 252.552 77.888 253.608 77.536C254.664 77.184 255.704 76.672 256.728 76C257.784 75.328 258.728 74.528 259.56 73.6V76.624C259.272 77.104 258.824 77.68 258.216 78.352C257.608 78.992 256.856 79.632 255.96 80.272C255.096 80.912 254.088 81.44 252.936 81.856C251.784 82.272 250.52 82.48 249.144 82.48C247.736 82.48 246.472 82.24 245.352 81.76C244.232 81.248 243.352 80.512 242.712 79.552C242.104 78.56 241.8 77.344 241.8 75.904V73.408C241.8 71.552 242.408 70.112 243.624 69.088C244.84 68.032 246.536 67.504 248.712 67.504H261.096ZM275.853 58.432V82H270.093V58.432H275.853ZM286.749 67.504V71.584H275.565V67.504H286.749ZM292.029 58.432V82H286.317V58.432H292.029ZM320.768 58.432V82L315.536 82.048V68.272C315.536 67.696 315.552 67.136 315.584 66.592C315.648 66.016 315.696 65.408 315.728 64.768H315.632C315.408 65.28 315.136 65.84 314.816 66.448C314.496 67.024 314.176 67.52 313.856 67.936L303.632 82H298.64V58.432H303.872V72.352C303.872 72.896 303.856 73.44 303.824 73.984C303.792 74.496 303.744 75.072 303.68 75.712H303.776C304.032 75.168 304.304 74.64 304.592 74.128C304.912 73.616 305.232 73.152 305.552 72.736L315.824 58.432H320.768ZM337.933 57.856C341.741 57.856 344.477 58.528 346.141 59.872C347.805 61.184 348.653 63.136 348.685 65.728C348.685 67.872 348.173 69.504 347.149 70.624C346.157 71.712 344.461 72.256 342.061 72.256H328.573V68.656H340.477C341.501 68.656 342.173 68.368 342.493 67.792C342.845 67.216 343.005 66.512 342.973 65.68C342.973 64.368 342.605 63.456 341.869 62.944C341.165 62.432 339.917 62.176 338.125 62.176C336.653 62.176 335.501 62.384 334.669 62.8C333.837 63.216 333.245 63.968 332.893 65.056C332.573 66.144 332.413 67.712 332.413 69.76C332.413 71.936 332.621 73.616 333.037 74.8C333.453 75.984 334.125 76.8 335.053 77.248C336.013 77.664 337.309 77.872 338.941 77.872C340.125 77.872 341.501 77.824 343.069 77.728C344.637 77.632 346.125 77.504 347.533 77.344L348.109 81.04C347.277 81.392 346.285 81.68 345.133 81.904C343.981 82.128 342.797 82.288 341.581 82.384C340.397 82.512 339.277 82.576 338.221 82.576C335.373 82.576 333.069 82.16 331.309 81.328C329.581 80.464 328.317 79.12 327.517 77.296C326.749 75.472 326.365 73.12 326.365 70.24C326.365 67.136 326.765 64.688 327.565 62.896C328.365 61.072 329.597 59.776 331.261 59.008C332.957 58.24 335.181 57.856 337.933 57.856Z" fill="#242424"/>
    <path opacity="0.8" d="M53.2256 5.58711C53.2256 3.19475 50.5626 1.76483 48.5684 3.08641L3.62512 32.8708C1.87455 34.0309 1.82703 36.5844 3.53323 37.8088L5.076 38.916L39.5019 61.514C40.5062 62.1732 41.8068 62.1698 42.8076 61.5054L51.885 55.4787C52.7223 54.9227 53.2256 53.9844 53.2256 52.9793V5.58711Z" fill="#A7A9AC"/>
    <path opacity="0.8" d="M3.24303 87.3933C1.64361 88.6604 1.74836 91.1199 3.44972 92.2463L48.5695 122.119C50.5638 123.44 53.2256 122.009 53.2256 119.618V72.2229C53.2256 71.2178 52.7223 70.2795 51.8849 69.7236L42.7865 63.683C41.7964 63.0257 40.5117 63.0148 39.5106 63.6552L6.768 84.601L3.24303 87.3933Z" fill="#A7A9AC"/>
    <path opacity="0.8" d="M107.311 38.5251C109.292 37.4409 109.41 34.6401 107.528 33.3929L63.1031 3.95169C61.1089 2.6301 58.4458 4.06002 58.4458 6.45239V53.8421C58.4458 54.8486 58.9505 55.7879 59.7896 56.3435L68.8673 62.3538C69.8832 63.0264 71.2051 63.0178 72.2121 62.332L106.597 38.9162L107.311 38.5251Z" fill="#A7A9AC"/>
    <path opacity="0.8" d="M58.4458 120.48C58.4458 122.872 61.1089 124.302 63.1031 122.981L108.082 93.1715C109.823 92.0181 109.882 89.4837 108.197 88.2503L103.213 84.6006L72.1956 64.5325C71.1943 63.8846 69.9043 63.8914 68.9098 64.5498L59.7896 70.5882C58.9505 71.1438 58.4458 72.0831 58.4458 73.0896V120.48Z" fill="#A7A9AC"/>
    <path opacity="0.8" d="M3.10442 37.3951C1.77493 36.5145 0 37.4678 0 39.0625V86.1374C0 87.732 1.77493 88.6854 3.10442 87.8048L38.6402 64.2673C39.8343 63.4763 39.8343 61.7234 38.6402 60.9325L3.10442 37.3951Z" fill="#414042"/>
    <path opacity="0.8" d="M108.565 88.668C109.895 89.5492 111.67 88.596 111.67 87.001V39.9294C111.67 38.3344 109.895 37.3811 108.565 38.2624L73.0602 61.7982C71.8669 62.5893 71.8669 64.3412 73.0602 65.1322L108.565 88.668Z" fill="#414042"/>
    </svg>  
            </center>
    

        )
    }
    const [auth , setAuth] = useState('auth')
    const [send , setSend] = useState(false)
    const [user , setUser] = useState()
    const [sign , setUp ] = useState()
    const Regestration = (type) => {
        setAuth(type)
    }
    const {
        signIn,
        registration,
        setOpen,
        open,
        alert,
        setAlert,
        errorMsg,
        setErrorMsg,
      } = useContext(AuthContext);
    const {watch , register , handleSubmit ,formState:{errors , isValid}} = useForm({mode:'all'})
    const sumbitForm = (values ) => {
        api.post('userSave', values ).then(async(response)=>{
            setUser(response.data)
            console.log(response )            
            console.log(values)
        })
        setAuth('auth')
    } 
    const sign_in = (values) => {
        api.post('userCheck', values ).then(async(response)=>{
            setUp(response.data)
            console.log(response.data )            
            console.log(values)
        }).then(()=> {
            if(sign?.token) {
            console.log(sign )     
            get_user()
            return {
                redirect: {
                  destination: "/auth",
                  permanent: false,
                },
              };
            } else {
                console.error('Yuser nod defined')
            }

        })
        console.log(values)
    }
    
    const get_user = async ( ) => {

        if( sign?.token ){
            const headers = {
                "Authorization" : `Bearer ${ sign?.token }`
            };

            let result = await axios( {
                method:'get',
                url: 'auth-user',
                baseURL:  "http://s499964.smrtp.ru/api/",
                data: JSON.stringify({}),
                headers: headers,
            } );

            let response = result.data;

            console.log( "get_user", response );

        } else {
            console.log("Login Token is empty");
        }

    }
    return (
        <AuthBlock>
            <Content>
                <Link href={'/'}>
                    <a>
                        <Logo/>
                    </a>
                </Link>
                <div>
                {auth == 'auth' ? (
                    <>
                     <Formik
                        initialValues={{
                            email: "",
                            password: "",
                        }}
                        onSubmit={async (values) => {
                            await signIn(values);
                            // console.log("login = > ", values);
                        }}
                    >
                    {({ values, errors, handleSubmit, handleChange, handleBlur }) => (
                    <form onSubmit={handleSubmit}>
                    <h2>Вход в личный кабинет</h2>
                    <OneIdBtn>ONE  &nbsp; <Image src={'/oneID.png'} width={'39px'} height={'29.17px'} /> </OneIdBtn>
                    <center>Или</center><br/>
                    <MyInput onBlur={handleBlur}  onChange={handleChange}   classN={ `w100 ${errors.phone && 'error '}`  }id={'email'} label={''} register={register} type={'text'}  placeholder={'Номер телефона '} required={true} />
                    <MyInput onBlur={handleBlur}  onChange={handleChange}  classN={ `w100 ${errors.password && 'error '}`  }id={'password'}  label={''}  type={'text'} register={register}  placeholder={'Введите пароль'} required={true} />
                    <ForgotPass onClick={()=>Regestration('forgotpass')}>Забыли пароль?</ForgotPass>
                    <Enter type='submit'>Войти</Enter><br/>
                    <RegestrB  onClick={()=>Regestration('reges')}>Регистрация</RegestrB>

                    </form>
                        )}
                    </Formik>
                    </>
               
                ):(
                   ''
                )}
                {auth == 'reges' ? (
                    <>
                    <Formik
                        initialValues={{
                            tel_email: "",
                            new_code: "",
                            code_new: "",
                        }}
                        onSubmit={async (values) => {
                            await registration(values);
                        }}
                            >
                    {({ values, errors, handleSubmit, handleChange, handleBlur }) => (
                     <form onSubmit={handleSubmit} >
                        {send == false && (
                            <>
                                <h2>Регистрация нового пользователя</h2>
                                <OneIdBtn>ONE  &nbsp; <Image src={'/oneID.png'} width={'39px'} height={'29.17px'} /> </OneIdBtn>
                                <center>Или</center><br/>
                    
                                <MyInput  onBlur={handleBlur}  onChange={handleChange}  classN={ `w100 ${errors.tel_email && 'error '}`  }id={'tel_email'}  label={''}  type={'text'} register={register}  placeholder={'Номер телефона или E-Mail'} required={true} /><br/>
                                <Enter disabled={!isValid} onClick={()=>setSend(true)}>Регистрация</Enter>
                                <p onClick={()=>Regestration('auth')} className='pointer center'>Вернуться назад</p>
                            </>
                        )}
                        {send == true && (
                            < >
                             <h2>Регистрация нового пользователя</h2>
                             <SendAgainBlock>
                                 <p className='center'>Код был отправлен на вашу почту </p>
                                 <h4 onClick={()=>setSend(false)}>Отправить еще раз</h4>
                             </SendAgainBlock>
                             {/* <MyInput label={errors.code_pot && 'Поле обязательна '} classN={ `w100 ${errors.code_pot && 'error '}`  } id={'code_pot'} register={register}   type={'text'}  placeholder={'Введите код подтверждения'} required={false} /> */}
                             <MyInput  classN={ `w100 ${errors.new_code && 'error '}`  } onBlur={handleBlur}  onChange={handleChange} id={'new_code'}  label={''}  type={'text'}  register={register} placeholder={'Придумайте надеждый пароль'} required={true} />
                             <MyInput  classN={ `w100 ${errors.code_new && 'error '}`  } onBlur={handleBlur}  onChange={handleChange} id={'code_new'}label={''}  type={'text'}   register={register} placeholder={'Повторите пароль'} required={true} />
                             <Enter disabled={!isValid} type='submit'>Регистрация</Enter>
                             <p onClick={()=>setSend(false)} className='pointer center'>Вернуться назад</p>
                         </>
                        )}
                    </form>
                    )}
                    </Formik>

                    </>
                   
                    
                       
                ):''} 
                {auth == 'forgotpass' ? (
                    <>
                        <h2 className="width"> Забыли пароль?</h2>
                        <p className='info center'>Введите ваш номер телефона или ваш E-mail и мы непременно вышлем вам код. После вы сможете сменить старый пароль на новый </p>
                        <AuthInput type={'text'}  placeholder='Введите ваш E-Mail или номер телефона   '/>
                        <Enter onClick={()=>Regestration('sendPass')}>Далее</Enter>
                    </>
                ):''}
                {auth == 'sendPass' ? (
                    <>
                    <>
                        <h2 className="width center"> Введите код и придумайте
                            надежный пароль</h2>
                        <p className='center'>Код был отправлен на вашу почту </p>
                        <SendMe className='center'>Отправить еще раз</SendMe>
                        <AuthInput type={'password'}  placeholder='Введите код подтверждения'/>
                        <AuthInput type={'password'}  placeholder='Придумайте надеждый пароль'/>
                        <AuthInput type={'password'} placeholder='Повторите пароль'/>
                        <Enter className='min' >Сохранить</Enter>
                        <p onClick={()=>Regestration('auth')} className='pointer center'>Вернуться назад</p>
                    </>
                    </>
                 ):''}

                </div>
                
            </Content>
        </AuthBlock>
    )
}

export default AuthPage